server:
  port: ${port:9092}        # to test load-balancing

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/microservices
    username: root
    password: ${db_pass}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  application:                       # this property is used to give our application one name so now in eureka
    name: User-Service               # server our application will be visible with this name.

  config:                             # this propes is used to connect to the config-server
#    import: optional:configserver:http://localhost:9094
    import: optional:configserver:http://Config-Server

# Below props are configured in config-files which can be fetched using config-server.
#eureka:
#  instance:
#    prefer-ip-address: true
#  client:
#    register-with-eureka: true
#    fetch-registry: true
#    service-url:                                    # this property will tell our microservice ki kis server ke
#      defaultZone: http://localhost:8761/eureka     # paas jake register hona hai.

# Actuator config
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health

  endpoint:
    health:
      show-details: always

# Resilience4J Config
resilience4j:
  circuitbreaker:
    circuitBreakerAspectOrder: 1
    instances:
      userRatingHotelBreaker:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
  retry:
    retryAspectOrder: 2
    instances:
      userRatingHotelRetry:
        max-attempts: 3
        wait-duration: 5s
